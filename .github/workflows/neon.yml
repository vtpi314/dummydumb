name: NeonSpor

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *"

env:
  SOURCE_M3U_URL: "https://raw.githubusercontent.com/sarapcanagii/Pitipitii/refs/heads/master/NeonSpor/NeonSpor.m3u8"
  DESTINATION_M3U_FILE: "main.m3u"
  NEW_GROUP_TITLE: "Spor - Ma√ß"
  START_MARKER: "# NEON_START"
  END_MARKER: "# NEON_END"

jobs:
  sync-playlist-block:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Download external M3U file
        run: |
          curl -L -o external_playlist.m3u "${{ env.SOURCE_M3U_URL }}"
          echo "External M3U file downloaded."

      - name: Rebuild Remote Content Block
        run: |
          python3 <<'EOF'
          import os
          import re

          dest_file = os.getenv('DESTINATION_M3U_FILE')
          remote_file = 'external_playlist.m3u'
          new_group_title = os.getenv('NEW_GROUP_TITLE')
          start_marker = os.getenv('START_MARKER')
          end_marker = os.getenv('END_MARKER')

          # --- Step 1: Read the local file and separate content ---
          content_before = []
          content_after = []
          parsing_state = 'before' # States: 'before', 'between', 'after'

          try:
              with open(dest_file, 'r', encoding='utf-8') as f:
                  for line in f:
                      stripped_line = line.strip()
                      if stripped_line == start_marker:
                          parsing_state = 'between'
                          continue
                      elif stripped_line == end_marker:
                          parsing_state = 'after'
                          continue
                      
                      if parsing_state == 'before':
                          content_before.append(line)
                      elif parsing_state == 'after':
                          content_after.append(line)
              
              # If we never switched to 'after', the markers weren't found correctly
              if parsing_state != 'after':
                  print(f"Markers not found in '{dest_file}'. Will create them at the end.")
                  # Reset and use the whole file as 'content_before'
                  with open(dest_file, 'r', encoding='utf-8') as f:
                      content_before = f.readlines()
                  content_after = [] # Nothing comes after
          except FileNotFoundError:
              print(f"File '{dest_file}' not found. Will create it with the new content.")
              content_before.append('#EXTM3U\n')

          # --- Step 2: Process the entire remote file ---
          new_remote_entries = []
          try:
              with open(remote_file, 'r', encoding='utf-8') as f:
                  lines = f.readlines()
          except FileNotFoundError:
              lines = []

          i = 0
          while i < len(lines):
              line = lines[i].strip()
              if line.startswith('#EXTINF:'):
                  extinf = line
                  i += 1
                  if i < len(lines):
                      url = lines[i].strip()
                      if not url: continue

                      # Modify or add the group-title attribute for every entry
                      group_title_pattern = re.compile(r'group-title="[^"]*"')
                      new_attribute = f'group-title="{new_group_title}"'
                      if group_title_pattern.search(extinf):
                          modified_extinf = group_title_pattern.sub(new_attribute, extinf)
                      else:
                          parts = extinf.rsplit(',', 1)
                          modified_extinf = f'{parts[0]} {new_attribute},{parts[1]}'
                      
                      new_remote_entries.append(f"{modified_extinf}\n{url}\n")
              i += 1
          
          print(f"Processed {len(new_remote_entries)} entries from remote source.")

          # --- Step 3: Write the final file from the parts ---
          with open(dest_file, 'w', encoding='utf-8') as f:
              # Part 1: Your content from before the block
              f.writelines(content_before)
              if content_before and not content_before[-1].endswith('\n'):
                  f.write('\n')

              # Part 2: The new, managed block
              f.write(f"{start_marker}\n")
              f.writelines(new_remote_entries)
              f.write(f"{end_marker}\n")

              # Part 3: Your content from after the block
              f.writelines(content_after)
          
          print(f"Successfully rebuilt the M3U file '{dest_file}'.")
          EOF

      - name: Commit and push if changed
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update spor category"
          file_pattern: ${{ env.DESTINATION_M3U_FILE }}
          commit_user_name: "GitHub Actions Bot"
          commit_user_email: "github-actions[bot]@users.noreply.github.com"
          commit_author: "GitHub Actions Bot <github-actions[bot]@users.noreply.github.com>"
